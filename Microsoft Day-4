12) NUMBER OF WAYS TO ARRIVE AT A DESTINATION

class Pair
{
   int node;
   int dist;
   Pair(int node,int dist)
   {
       this.node=node;
       this.dist=dist;
   }

}

class Solution {
    public int countPaths(int n, int[][] roads) {

      ArrayList<ArrayList<Pair>> al=new ArrayList<ArrayList<Pair> >();
      for(int i=0;i<n;i++)
      {
          al.add(new ArrayList<>());
      }
      for(int road[]:roads)
      {

        al.get(road[0]).add(new Pair(road[1],road[2]));
        al.get(road[1]).add(new Pair(road[0],road[2]));

      }

  PriorityQueue<Pair> q=new PriorityQueue<Pair>(new Comparator<Pair>()
   {
       public int compare(Pair p1,Pair p2)
       {
           if(p1.dist>p2.dist)
           {
               return +1;
           }
           
           return -1;
       }


   });
   
   
 
   q.add(new Pair(0,0));

   int dist[]=new int[n];
   Arrays.fill(dist,Integer.MAX_VALUE);
   dist[0]=0;
   long nways[]=new long[n];
   Arrays.fill(nways,0);
nways[0]=1;
 int mod = (int)Math.pow(10 , 9) + 7;
   while(!q.isEmpty())
   {

      int node=q.peek().node;
      int dis=q.peek().dist;
      q.remove();
      for(Pair p : al.get(node) )
      {
            int x=p.node;
            int y=p.dist;
            if(dis+y<dist[x])
            {
                dist[x]=dis+y;
                 nways[x]=(nways[node]);
                 q.add(new Pair(x,dist[x]));

            }
            else if(dis+y==dist[x])
            {
                  nways[x]+=nways[node];
                  nways[x]=nways[x]%mod;

            }


      }


   }

   
return (int)nways[n-1];



    }
}

13) LONGEST HAPPY PREFIX

class Solution {
    public String longestPrefix(String s) {
        int n = s.length();
        int[] lps = new int[n];
        for (int i = 1, j = 0; i < n; i++) {
            while (j > 0 && s.charAt(i) != s.charAt(j)) j = lps[j-1];
            if (s.charAt(i) == s.charAt(j)) lps[i] = ++j;
        }
        return s.substring(0, lps[n-1]);
    }
}

14) SEAT ARRANGEMENT IN A SPICE JET

class Solution {
    public double nthPersonGetsNthSeat(int n) {
        if(n==1)
            return 1;
        double[] strg = new double[n];
        strg[0] = 1.0;
        strg[1] = 0.5;
        for(int i=2;i<strg.length;i++){
            double d = (1/(1.0*n)) + ((n-2)/(1.0*n))*(strg[i-1]);
            strg[i] = d;
        }
        return strg[n-1];
    }
}

15) DELETIONS TO MAKE AN ARRAY DIVISIBLE

class Solution {
    public int minOperations(int[] nums, int[] numsDivide) {
        Arrays.sort(numsDivide);
        int val=numsDivide[0];
        for(int i=1;i<numsDivide.length;i++){
            val=gcd(val,numsDivide[i]);
        }
        Arrays.sort(nums);
        int c=0;
        if(nums[0]>val) return -1;
        for(int i=0;i<nums.length;i++){
            if(nums[i]>val) break;
            if(val%nums[i]!=0) c++;
            else break;
        }
        if(c==nums.length) return -1;
        return c;
    }

    static int gcd(int a, int b){
        if (a == 0) return b;
        return gcd(b % a, a);
    }
}
