9) NUMBER OF PAIRS SATISFYING INEQUALITIES
 
 
 class Solution {
    long count=0;
    public long numberOfPairs(int[] nums1, int[] nums2, int diff) {
       
       
        int n=nums1.length;
        int res[]=new int[n];
        for(int i=0;i<n;i++)
        {
            res[i]=nums1[i]-nums2[i]+diff;
        }
     mergesort(res,0,n-1,diff);
    return count;
   
   
    }


    public void  mergesort(int res[],int start,int end,int diff)
    {
     if(start==end)
     {
         return ;
     }
     int mid=(start+end)/2;
     mergesort(res,start,mid,diff);
     mergesort(res,mid+1,end,diff);
   merge(res,start,mid,end,diff);

    }
    public void merge(int res[],int start,int mid,int end,int diff)
    {
        int i=start;
        int j=mid+1;
     while(i<=mid&& j<=end)
     {
          if(res[i]<=res[j]+diff)
          {
              count=count+(end-j)+1;
              i++;
          }
          else
          {
              j++;
          }

     }
     ArrayList<Integer> temp=new ArrayList<Integer>();
     for( i=start;i<=end;i++)
     {
         temp.add(res[i]);
     }
  Collections.sort(temp);
  int k=0;
  for( i=start;i<=end;i++)
  {
       res[i]=temp.get(k++);
  }


    }
}




10) SHORTEST UNSORTED CONTINOUS SUBARRAY



class Solution {
    public int findUnsortedSubarray(int[] nums) {
int n=nums.length;
     int start=0;
     int end=n-1;

while(start+1<n&& nums[start]<=nums[start+1])
{
   start++;

}
while(end-1>0 && nums[end-1]<=nums[end])
{
    end--;

}
if(start==n-1)
{
    return 0;
}

int max=Integer.MIN_VALUE;
int min=Integer.MAX_VALUE;

for(int i=start;i<=end;i++)
{
    max=Math.max(max,nums[i]);
    min=Math.min(min,nums[i]);
}

while(start-1>=0&& nums[start-1]>min)
{
    start--;
}
  while(end+1<n&& nums[end+1]<max)
  {
      end++;
  }



return end-start+1;
    }
}


11) COMBINATION SUM 3

class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        
List<List<Integer>> res=new ArrayList();

generatesubsets(1,9,new ArrayList<Integer>(), res,k,n);
return res;


    }
    public void generatesubsets(int start,int end,ArrayList<Integer> al,List<List<Integer>> res,int k,int target)
    {

        if(al.size()>k)
        {
            return ;
        }
      if(target==0  &&al.size()==k )
      {
          res.add(new ArrayList<Integer>(al));
          return ;
      }

for(int i=start;i<=end;i++)
{

   al.add(i);
   generatesubsets(i+1,end,al, res,k,target-i);
   al.remove(al.size()-1);


}


    }
}
